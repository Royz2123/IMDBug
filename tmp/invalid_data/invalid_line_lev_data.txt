--- ALL TOKENS ---
<s>staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
{
size_tlen;
constchar*p;
charc;
intret=1;

for(p=key;(c=*p);p++){
/*validcharactersarea..z,A..Z,0..9*/
if(!((c>='a'&&c<='z')
||(c>='A'&&c<='Z')
||(c>='0'&&c<='9')
||c==','
||c=='-')){
ret=0;
break;
}
}

len=p-key;

/*Somewhatarbitrarylengthlimithere,butshouldbewaymorethan
anyoneneedsandavoidsfile-levelwarningslateronifweexceedMAX_PATH*/
if(len==0||len>128){
ret=0;
}

returnret;
}

staticchar*ps_files_path_create(char*buf,size_tbuflen</s>
--- FLAW ---
if(!ps_files_valid_key(key)){
PS(invalid_session_id)=1;


--- ALL TOKENS ---
<s>staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
{
size_tlen;
constchar*p;
charc;
intret=1;

for(p=key;(c=*p);p++){
/*validcharactersarea..z,A..Z,0..9*/
if(!((c>='a'&&c<='z')
||(c>='A'&&c<='Z')
||(c>='0'&&c<='9')
||c==','
||c=='-')){
ret=0;
break;
}
}

len=p-key;

/*Somewhatarbitrarylengthlimithere,butshouldbewaymorethan
anyoneneedsandavoidsfile-levelwarningslateronifweexceedMAX_PATH*/
if(len==0||len>128){
ret=0;
}

returnret;
}

staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
size_tkey_len;
constchar*p;
inti;
intn;

key_len=strlen(key);
if(key_len<=data->dirdepth||
buflen<(strlen(data->basedir)+2*data->dirdepth+key_len+5+sizeof(FILE_PREFIX))){
returnNULL;
}

p=key;
memcpy(buf,data->basedir,data->basedir_len);
n=data->basedir_len;
buf[n++]=PHP_DIR_SEPARATOR;
for(i=0;i<(int)data->dirdepth;i++){
buf[n++]=*p++;
buf[n++]=PHP_DIR_SEPARATOR;
}
memcpy(buf+n,FILE_PREFIX,sizeof(FILE_PREFIX)-1);
n+=sizeof(FILE_PREFIX)-1;
memcpy(buf+n,key,</s>
--- FLAW ---
if(!ps_files_valid_key(key)){
PS(invalid_session_id)=1;


--- ALL TOKENS ---
<s>staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
{
size_tlen;
constchar*p;
charc;
intret=1;

for(p=key;(c=*p);p++){
/*validcharactersarea..z,A..Z,0..9*/
if(!((c>='a'&&c<='z')
||(c>='A'&&c<='Z')
||(c>='0'&&c<='9')
||c==','
||c=='-')){
ret=0;
break;
}
}

len=p-key;

/*Somewhatarbitrarylengthlimithere,butshouldbewaymorethan
anyoneneedsandavoidsfile-levelwarningslateronifweexceedMAX_PATH*/
if(len==0||len>128){
ret=0;
}

returnret;
}

staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
size_tkey_len;
constchar*p;
inti;
intn;

key_len=strlen(key);
if(key_len<=data->dirdepth||
buflen<(strlen(data->basedir)+2*data->dirdepth+key_len+5+sizeof(FILE_PREFIX))){
returnNULL;
}

p=key;
memcpy(buf,data->basedir,data->basedir_len);
n=data->basedir_len;
buf[n++]=PHP_DIR_SEPARATOR;
for(i=0;i<(int)data->dirdepth;i++){
buf[n++]=*p++;
buf[n++]=PHP_DIR_SEPARATOR;
}
memcpy(buf+n,FILE_PREFIX,sizeof(FILE_PREFIX)-1);
n+=sizeof(FILE_PREFIX)-1;
memcpy(buf+n,key,</s>
--- FLAW ---
if(!ps_files_valid_key(key)){
PS(invalid_session_id)=1;


--- ALL TOKENS ---
<s>staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
{
size_tlen;
constchar*p;
charc;
intret=1;

for(p=key;(c=*p);p++){
/*validcharactersarea..z,A..Z,0..9*/
if(!((c>='a'&&c<='z')
||(c>='A'&&c<='Z')
||(c>='0'&&c<='9')
||c==','
||c=='-')){
ret=0;
break;
}
}

len=p-key;

/*Somewhatarbitrarylengthlimithere,butshouldbewaymorethan
anyoneneedsandavoidsfile-levelwarningslateronifweexceedMAX_PATH*/
if(len==0||len>128){
ret=0;
}

returnret;
}

staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
size_tkey_len;
constchar*p;
inti;
intn;

key_len=strlen(key);
if(key_len<=data->dirdepth||
buflen<(strlen(data->basedir)+2*data->dirdepth+key_len+5+sizeof(FILE_PREFIX))){
returnNULL;
}

p=key;
memcpy(buf,data->basedir,data->basedir_len);
n=data->basedir_len;
buf[n++]=PHP_DIR_SEPARATOR;
for(i=0;i<(int)data->dirdepth;i++){
buf[n++]=*p++;
buf[n++]=PHP_DIR_SEPARATOR;
}
memcpy(buf+n,FILE_PREFIX,sizeof(FILE_PREFIX)-1);
n+=sizeof(FILE_PREFIX)-1;
memcpy(buf+n,key,</s>
--- FLAW ---
if(!ps_files_valid_key(key)){
PS(invalid_session_id)=1;


--- ALL TOKENS ---
<s>staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
{
size_tlen;
constchar*p;
charc;
intret=1;

for(p=key;(c=*p);p++){
/*validcharactersarea..z,A..Z,0..9*/
if(!((c>='a'&&c<='z')
||(c>='A'&&c<='Z')
||(c>='0'&&c<='9')
||c==','
||c=='-')){
ret=0;
break;
}
}

len=p-key;

/*Somewhatarbitrarylengthlimithere,butshouldbewaymorethan
anyoneneedsandavoidsfile-levelwarningslateronifweexceedMAX_PATH*/
if(len==0||len>128){
ret=0;
}

returnret;
}

staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
size_tkey_len;
constchar*p;
inti;
intn;

key_len=strlen(key);
if(key_len<=data->dirdepth||
buflen<(strlen(data->basedir)+2*data->dirdepth+key_len+5+sizeof(FILE_PREFIX))){
returnNULL;
}

p=key;
memcpy(buf,data->basedir,data->basedir_len);
n=data->basedir_len;
buf[n++]=PHP_DIR_SEPARATOR;
for(i=0;i<(int)data->dirdepth;i++){
buf[n++]=*p++;
buf[n++]=PHP_DIR_SEPARATOR;
}
memcpy(buf+n,FILE_PREFIX,sizeof(FILE_PREFIX)-1);
n+=sizeof(FILE_PREFIX)-1;
memcpy(buf+n,key,</s>
--- FLAW ---
if(!ps_files_valid_key(key)){
PS(invalid_session_id)=1;


--- ALL TOKENS ---
<s>staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
{
size_tlen;
constchar*p;
charc;
intret=1;

for(p=key;(c=*p);p++){
/*validcharactersarea..z,A..Z,0..9*/
if(!((c>='a'&&c<='z')
||(c>='A'&&c<='Z')
||(c>='0'&&c<='9')
||c==','
||c=='-')){
ret=0;
break;
}
}

len=p-key;

/*Somewhatarbitrarylengthlimithere,butshouldbewaymorethan
anyoneneedsandavoidsfile-levelwarningslateronifweexceedMAX_PATH*/
if(len==0||len>128){
ret=0;
}

returnret;
}

staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
size_tkey_len;
constchar*p;
inti;
intn;

key_len=strlen(key);
if(key_len<=data->dirdepth||
buflen<(strlen(data->basedir)+2*data->dirdepth+key_len+5+sizeof(FILE_PREFIX))){
returnNULL;
}

p=key;
memcpy(buf,data->basedir,data->basedir_len);
n=data->basedir_len;
buf[n++]=PHP_DIR_SEPARATOR;
for(i=0;i<(int)data->dirdepth;i++){
buf[n++]=*p++;
buf[n++]=PHP_DIR_SEPARATOR;
}
memcpy(buf+n,FILE_PREFIX,sizeof(FILE_PREFIX)-1);
n+=sizeof(FILE_PREFIX)-1;
memcpy(buf+n,key,</s>
--- FLAW ---
if(!ps_files_valid_key(key)){
PS(invalid_session_id)=1;


--- ALL TOKENS ---
<s>staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
{
size_tlen;
constchar*p;
charc;
intret=1;

for(p=key;(c=*p);p++){
/*validcharactersarea..z,A..Z,0..9*/
if(!((c>='a'&&c<='z')
||(c>='A'&&c<='Z')
||(c>='0'&&c<='9')
||c==','
||c=='-')){
ret=0;
break;
}
}

len=p-key;

/*Somewhatarbitrarylengthlimithere,butshouldbewaymorethan
anyoneneedsandavoidsfile-levelwarningslateronifweexceedMAX_PATH*/
if(len==0||len>128){
ret=0;
}

returnret;
}

staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
size_tkey_len;
constchar*p;
inti;
intn;

key_len=strlen(key);
if(key_len<=data->dirdepth||
buflen<(strlen(data->basedir)+2*data->dirdepth+key_len+5+sizeof(FILE_PREFIX))){
returnNULL;
}

p=key;
memcpy(buf,data->basedir,data->basedir_len);
n=data->basedir_len;
buf[n++]=PHP_DIR_SEPARATOR;
for(i=0;i<(int)data->dirdepth;i++){
buf[n++]=*p++;
buf[n++]=PHP_DIR_SEPARATOR;
}
memcpy(buf+n,FILE_PREFIX,sizeof(FILE_PREFIX)-1);
n+=sizeof(FILE_PREFIX)-1;
memcpy(buf+n,key,</s>
--- FLAW ---
if(!ps_files_valid_key(key)){
PS(invalid_session_id)=1;


--- ALL TOKENS ---
<s>staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
{
size_tlen;
constchar*p;
charc;
intret=1;

for(p=key;(c=*p);p++){
/*validcharactersarea..z,A..Z,0..9*/
if(!((c>='a'&&c<='z')
||(c>='A'&&c<='Z')
||(c>='0'&&c<='9')
||c==','
||c=='-')){
ret=0;
break;
}
}

len=p-key;

/*Somewhatarbitrarylengthlimithere,butshouldbewaymorethan
anyoneneedsandavoidsfile-levelwarningslateronifweexceedMAX_PATH*/
if(len==0||len>128){
ret=0;
}

returnret;
}

staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
size_tkey_len;
constchar*p;
inti;
intn;

key_len=strlen(key);
if(key_len<=data->dirdepth||
buflen<(strlen(data->basedir)+2*data->dirdepth+key_len+5+sizeof(FILE_PREFIX))){
returnNULL;
}

p=key;
memcpy(buf,data->basedir,data->basedir_len);
n=data->basedir_len;
buf[n++]=PHP_DIR_SEPARATOR;
for(i=0;i<(int)data->dirdepth;i++){
buf[n++]=*p++;
buf[n++]=PHP_DIR_SEPARATOR;
}
memcpy(buf+n,FILE_PREFIX,sizeof(FILE_PREFIX)-1);
n+=sizeof(FILE_PREFIX)-1;
memcpy(buf+n,key,</s>
--- FLAW ---
if(!ps_files_valid_key(key)){
PS(invalid_session_id)=1;


--- ALL TOKENS ---
<s>staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
{
size_tlen;
constchar*p;
charc;
intret=1;

for(p=key;(c=*p);p++){
/*validcharactersarea..z,A..Z,0..9*/
if(!((c>='a'&&c<='z')
||(c>='A'&&c<='Z')
||(c>='0'&&c<='9')
||c==','
||c=='-')){
ret=0;
break;
}
}

len=p-key;

/*Somewhatarbitrarylengthlimithere,butshouldbewaymorethan
anyoneneedsandavoidsfile-levelwarningslateronifweexceedMAX_PATH*/
if(len==0||len>128){
ret=0;
}

returnret;
}

staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
size_tkey_len;
constchar*p;
inti;
intn;

key_len=strlen(key);
if(key_len<=data->dirdepth||
buflen<(strlen(data->basedir)+2*data->dirdepth+key_len+5+sizeof(FILE_PREFIX))){
returnNULL;
}

p=key;
memcpy(buf,data->basedir,data->basedir_len);
n=data->basedir_len;
buf[n++]=PHP_DIR_SEPARATOR;
for(i=0;i<(int)data->dirdepth;i++){
buf[n++]=*p++;
buf[n++]=PHP_DIR_SEPARATOR;
}
memcpy(buf+n,FILE_PREFIX,sizeof(FILE_PREFIX)-1);
n+=sizeof(FILE_PREFIX)-1;
memcpy(buf+n,key,</s>
--- FLAW ---
if(!ps_files_valid_key(key)){
PS(invalid_session_id)=1;


--- ALL TOKENS ---
<s>staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
{
size_tlen;
constchar*p;
charc;
intret=1;

for(p=key;(c=*p);p++){
/*validcharactersarea..z,A..Z,0..9*/
if(!((c>='a'&&c<='z')
||(c>='A'&&c<='Z')
||(c>='0'&&c<='9')
||c==','
||c=='-')){
ret=0;
break;
}
}

len=p-key;

/*Somewhatarbitrarylengthlimithere,butshouldbewaymorethan
anyoneneedsandavoidsfile-levelwarningslateronifweexceedMAX_PATH*/
if(len==0||len>128){
ret=0;
}

returnret;
}

staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
size_tkey_len;
constchar*p;
inti;
intn;

key_len=strlen(key);
if(key_len<=data->dirdepth||
buflen<(strlen(data->basedir)+2*data->dirdepth+key_len+5+sizeof(FILE_PREFIX))){
returnNULL;
}

p=key;
memcpy(buf,data->basedir,data->basedir_len);
n=data->basedir_len;
buf[n++]=PHP_DIR_SEPARATOR;
for(i=0;i<(int)data->dirdepth;i++){
buf[n++]=*p++;
buf[n++]=PHP_DIR_SEPARATOR;
}
memcpy(buf+n,FILE_PREFIX,sizeof(FILE_PREFIX)-1);
n+=sizeof(FILE_PREFIX)-1;
memcpy(buf+n,key,</s>
--- FLAW ---
if(!ps_files_valid_key(key)){
PS(invalid_session_id)=1;


--- ALL TOKENS ---
<s>staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
{
size_tlen;
constchar*p;
charc;
intret=1;

for(p=key;(c=*p);p++){
/*validcharactersarea..z,A..Z,0..9*/
if(!((c>='a'&&c<='z')
||(c>='A'&&c<='Z')
||(c>='0'&&c<='9')
||c==','
||c=='-')){
ret=0;
break;
}
}

len=p-key;

/*Somewhatarbitrarylengthlimithere,butshouldbewaymorethan
anyoneneedsandavoidsfile-levelwarningslateronifweexceedMAX_PATH*/
if(len==0||len>128){
ret=0;
}

returnret;
}

staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
size_tkey_len;
constchar*p;
inti;
intn;

key_len=strlen(key);
if(key_len<=data->dirdepth||
buflen<(strlen(data->basedir)+2*data->dirdepth+key_len+5+sizeof(FILE_PREFIX))){
returnNULL;
}

p=key;
memcpy(buf,data->basedir,data->basedir_len);
n=data->basedir_len;
buf[n++]=PHP_DIR_SEPARATOR;
for(i=0;i<(int)data->dirdepth;i++){
buf[n++]=*p++;
buf[n++]=PHP_DIR_SEPARATOR;
}
memcpy(buf+n,FILE_PREFIX,sizeof(FILE_PREFIX)-1);
n+=sizeof(FILE_PREFIX)-1;
memcpy(buf+n,key,</s>
--- FLAW ---
if(!ps_files_valid_key(key)){
PS(invalid_session_id)=1;


--- ALL TOKENS ---
<s>staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
{
size_tlen;
constchar*p;
charc;
intret=1;

for(p=key;(c=*p);p++){
/*validcharactersarea..z,A..Z,0..9*/
if(!((c>='a'&&c<='z')
||(c>='A'&&c<='Z')
||(c>='0'&&c<='9')
||c==','
||c=='-')){
ret=0;
break;
}
}

len=p-key;

/*Somewhatarbitrarylengthlimithere,butshouldbewaymorethan
anyoneneedsandavoidsfile-levelwarningslateronifweexceedMAX_PATH*/
if(len==0||len>128){
ret=0;
}

returnret;
}

staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
size_tkey_len;
constchar*p;
inti;
intn;

key_len=strlen(key);
if(key_len<=data->dirdepth||
buflen<(strlen(data->basedir)+2*data->dirdepth+key_len+5+sizeof(FILE_PREFIX))){
returnNULL;
}

p=key;
memcpy(buf,data->basedir,data->basedir_len);
n=data->basedir_len;
buf[n++]=PHP_DIR_SEPARATOR;
for(i=0;i<(int)data->dirdepth;i++){
buf[n++]=*p++;
buf[n++]=PHP_DIR_SEPARATOR;
}
memcpy(buf+n,FILE_PREFIX,sizeof(FILE_PREFIX)-1);
n+=sizeof(FILE_PREFIX)-1;
memcpy(buf+n,key,</s>
--- FLAW ---
if(!ps_files_valid_key(key)){
PS(invalid_session_id)=1;


--- ALL TOKENS ---
<s>staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
{
size_tlen;
constchar*p;
charc;
intret=1;

for(p=key;(c=*p);p++){
/*validcharactersarea..z,A..Z,0..9*/
if(!((c>='a'&&c<='z')
||(c>='A'&&c<='Z')
||(c>='0'&&c<='9')
||c==','
||c=='-')){
ret=0;
break;
}
}

len=p-key;

/*Somewhatarbitrarylengthlimithere,butshouldbewaymorethan
anyoneneedsandavoidsfile-levelwarningslateronifweexceedMAX_PATH*/
if(len==0||len>128){
ret=0;
}

returnret;
}

staticchar*ps_files_path_create(char*buf,size_tbuflen,ps_files*data,constchar*key)
{
size_tkey_len;
constchar*p;
inti;
intn;

key_len=strlen(key);
if(key_len<=data->dirdepth||
buflen<(strlen(data->basedir)+2*data->dirdepth+key_len+5+sizeof(FILE_PREFIX))){
returnNULL;
}

p=key;
memcpy(buf,data->basedir,data->basedir_len);
n=data->basedir_len;
buf[n++]=PHP_DIR_SEPARATOR;
for(i=0;i<(int)data->dirdepth;i++){
buf[n++]=*p++;
buf[n++]=PHP_DIR_SEPARATOR;
}
memcpy(buf+n,FILE_PREFIX,sizeof(FILE_PREFIX)-1);
n+=sizeof(FILE_PREFIX)-1;
memcpy(buf+n,key,</s>
--- FLAW ---
if(!ps_files_valid_key(key)){
PS(invalid_session_id)=1;


